version: '3.8'

services:
  # Базы данных
  postgres:
    build:
      context: ./databases/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongo:
    build:
      context: ./databases/mongo
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
      - ./databases/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - "${MONGO_PORT}:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mssql:
    build:
      context: ./databases/mssql
      dockerfile: Dockerfile
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      MSSQL_PID: Express
    volumes:
      - mssql_data:/var/opt/mssql
      - ./databases/mssql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${MSSQL_PORT}:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD} -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Брокеры
  redis:
    build:
      context: ./brokers/redis
      dockerfile: Dockerfile
    volumes:
      - redis_data:/data
      - ./brokers/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    build:
      context: ./brokers/rabbitmq
      dockerfile: Dockerfile
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    build:
      context: ./brokers/kafka
      dockerfile: Dockerfile
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BROKER}
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: zookeeper:3.7
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${ZOOKEEPER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Мониторинг
  elasticsearch:
    build:
      context: ./services/monitoring/elasticsearch
      dockerfile: Dockerfile
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s ${ELASTICSEARCH_URL}/_cluster/health | grep -q 'green\|yellow'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kibana:
    image: kibana:8.6.2
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_URL}
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  logstash:
    image: logstash:8.6.2
    volumes:
      - ./services/monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_URL}
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600/_node/stats"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  loki:
    build:
      context: ./services/monitoring/loki
      dockerfile: Dockerfile
    volumes:
      - ./services/monitoring/loki/config.yaml:/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT}:3100"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  prometheus:
    build:
      context: ./services/monitoring/prometheus
      dockerfile: Dockerfile
    volumes:
      - ./services/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./services/monitoring/prometheus/rules:/etc/prometheus/rules
    ports:
      - "${PROMETHEUS_PORT}:9090"
    depends_on:
      - elasticsearch
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  grafana:
    build:
      context: ./services/monitoring/grafana
      dockerfile: Dockerfile
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./services/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - loki
      - prometheus
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Сервисы приложений
  airflow:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW_UID: ${AIRFLOW_UID}
    volumes:
      - ./services/airflow/dags:/opt/airflow/dags
      - ./services/airflow/config:/opt/airflow/config
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "airflow info"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  celery_worker:
    build:
      context: ./services/celery_worker
      dockerfile: Dockerfile
    environment:
      BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A tasks inspect ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  django_app:
    build:
      context: ./services/django_app
      dockerfile: Dockerfile
    command: ./entrypoint.sh
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      BROKER_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_HOST}:${RABBITMQ_PORT}//
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
    volumes:
      - ./services/django_app/app:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  fastapi_app:
    build:
      context: ./services/fastapi_app
      dockerfile: Dockerfile
    command: ./entrypoint.sh
    environment:
      FASTAPI_SECRET_KEY: ${FASTAPI_SECRET_KEY}
      MONGO_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
    volumes:
      - ./services/fastapi_app/app:/app
    ports:
      - "8001:8000"
    depends_on:
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  flask_app:
    build:
      context: ./services/flask_app
      dockerfile: Dockerfile
    command: ./entrypoint.sh
    environment:
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      MSSQL_URL: mssql://${MSSQL_SA_PASSWORD}@${MSSQL_HOST}:${MSSQL_PORT}
    volumes:
      - ./services/flask_app/app:/app
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
      mssql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  flower:
    build:
      context: ./services/flower
      dockerfile: Dockerfile
    environment:
      CELERY_BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      FLOWER_PORT: 5555
    ports:
      - "5555:5555"
    depends_on:
      celery_worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5555/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  telegram_bot:
    build:
      context: ./services/telegram_bot
      dockerfile: Dockerfile
    environment:
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      KAFKA_BROKER: ${KAFKA_BROKER}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8080\")' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Прокси
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - django_app
      - fastapi_app
      - flask_app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  mssql_data:
  redis_data:
  elasticsearch_data:
  grafana_data: 
